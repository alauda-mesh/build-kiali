# Copyright 2022 The Distroless Authors
# SPDX-License-Identifier: Apache-2.0

name: 'Build image with apko'
description: |
  This action build an OCI image with apko, given a config file
  and tag to use and output a tar file and does not push to a registry.

inputs:
  apko-version:
    description: |
      The version of apko to be used
    default: v0.27.9
    required: true

  config:
    description: |
      The config file to use for building the image.
    default: .apko.yaml
    required: false

  lockfile:
    description: |
      The lock file that constraints versions of packages.
    default: ''
    required: false

  keyring-append:
    description: |
      The value to pass to --keyring-append.
    default: ''

  build-repository-append:
    description: |
      The value to pass to --build-repository-append.
    required: false
    default: ''

  repository-append:
    description: |
      The value to pass to --repository-append.
    default: ''

  package-append:
    description: |
      The value to pass to --package-append.
    default: ''

  archs:
    description: |
      The architectures to build for.
    default: ''

  build-options:
    description: |
      Build options to enable (comma-separated).
    default: ''

  source-date-epoch:
    description: |
      The UNIX timestamp to use as the source date when building an image.
      This is set as the SOURCE_DATE_EPOCH environment variable.
    default: ''

  tag:
    description: |
      The tag to use for building the image.
    required: true

  vcs-url:
    description: |
      Whether to detect and embed the VCS URL (unlike apko we default this to false for reproducible builds).
    type: boolean
    required: false
    default: false

  debug:
    description: |
      Enable debug logging.
    type: boolean
    required: false
    default: false

  automount-src:
    description: |
      If this directory is found, create a copy at automount-dest (inside container)
    default: ${{ github.workspace }}/.apko-automount

  automount-dest:
    description: |
      If automount-src is found, create a copy at this location (inside container)
    default: /work

runs:
  using: composite
  steps:
  - uses: jaxxstorm/action-install-gh-release@v2.1.0
    with:
      repo: chainguard-dev/apko
      tag: ${{ inputs.apko-version }}

  - shell: bash
    run: |
      set -o errexit
      if [ -d "${{ inputs.automount-src }}" ]; then
        echo "Creating copy of ${{ inputs.automount-src }} at ${{ inputs.automount-dest }}"
        cp -r "${{ inputs.automount-src }}" "${{ inputs.automount-dest }}"
      fi
      [ -n "${{ inputs.source-date-epoch }}" ] && export SOURCE_DATE_EPOCH='${{ inputs.source-date-epoch }}'
      [ -n "${{ inputs.keyring-append }}" ] && keys="-k ${{ inputs.keyring-append }}"
      [ -n "${{ inputs.build-repository-append }}" ] && build_repos="-b ${{ inputs.build-repository-append }}"
      [ -n "${{ inputs.repository-append }}" ] && repos="-r ${{ inputs.repository-append }}"
      [ -n "${{ inputs.package-append }}" ] && packages="-p ${{ inputs.package-append }}"
      [ -n "${{ inputs.archs }}" ] && archs="--arch ${{ inputs.archs }}"
      build_options=""
      if [ -n "${{ inputs.build-options }}" ]; then
        opts="${{ inputs.build-options }}"
        for opt in ${opts//,/ }; do
          build_options="${build_options} --build-option ${opt}"
        done
      fi
      apko build \
        --vcs=${{ inputs.vcs-url }} \
        --lockfile=${{ inputs.lockfile }} \
        ${{ inputs.debug && '--log-level debug' }} \
        ${{ inputs.config }} ${{ inputs.tag }} output.tar $keys $build_repos $repos $packages $archs $build_options
      echo EXIT CODE: $?
