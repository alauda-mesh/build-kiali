name: Build Kiali Operator

on:
  pull_request:
    paths:
      - ".github/workflows/build-kiali-operator.yaml"
      - "kiali-operator/**"
      - "docker/kiali-operator/**"
  workflow_dispatch:
    inputs:
      epoch:
        description: Release epoch
        required: true
        type: number
        default: 0

env:
  OPERATOR_BASE_IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/ansible-operator
  OPERATOR_BASE_IMAGE_VERSION: v1.38.1

jobs:
  determine-version:
    name: Determine kiali-operator version
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.image-version.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine image version
        id: image-version
        run: |
          TAG="v$(cat kiali-operator/VERSION)"
          if [[ -n "${{ inputs.epoch }}" ]]; then
            TAG="${TAG}-r${{ inputs.epoch }}"
          elif [[ -n "${{ github.event.pull_request.number }}" ]]; then
            TAG="${TAG}-pr.${{ github.event.pull_request.number }}.${{ github.run_number }}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  build-kiali-operator:
    name: Build kiali-operator image
    runs-on: [self-hosted, linux, "${{ matrix.platform == 'linux/arm64' && 'arm64' || 'x64' }}"]
    needs: [determine-version]

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    env:
      http_proxy: ${{ vars.http_proxy }}
      https_proxy: ${{ vars.https_proxy }}
      no_proxy: ${{ vars.no_proxy }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to build-harbor.alauda.cn
        uses: docker/login-action@v3
        with:
          registry: build-harbor.alauda.cn
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Determine platform tag
        id: platform-tag
        run: |
          ARCH=$(echo "${{ matrix.platform }}" | sed 's/linux\///g')
          echo "tag=${{ needs.determine-version.outputs.tag }}-${ARCH}" >> $GITHUB_OUTPUT

      - name: Build and push kiali-operator image
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform}}
          context: kiali-operator
          file: docker/kiali-operator/Dockerfile
          push: true
          build-args: |
            OPERATOR_BASE_IMAGE_REPO=${{ env.OPERATOR_BASE_IMAGE_REPO }}
            OPERATOR_BASE_IMAGE_VERSION=${{ env.OPERATOR_BASE_IMAGE_VERSION }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.platform-tag.outputs.tag }}
        env:
          IMAGE_NAME: build-harbor.alauda.cn/asm/kiali-operator
          SOURCE_DATE_EPOCH: 315532800

  merge-kiali-operator-manifests:
    name: Merge kiali-operator image manifests
    runs-on: [self-hosted, linux]

    env:
      http_proxy: ${{ vars.http_proxy }}
      https_proxy: ${{ vars.https_proxy }}
      no_proxy: ${{ vars.no_proxy }}

    needs: [determine-version, build-kiali-operator]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup crane
        uses: imjasonh/setup-crane@v0.4
        with:
          version: latest-release

      - name: Login to build-harbor.alauda.cn
        uses: docker/login-action@v3
        with:
          registry: build-harbor.alauda.cn
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Merge manifests and push to image registry
        env:
          IMAGE_NAME: build-harbor.alauda.cn/asm/kiali-operator
          TAG_PREFIX: ${{ needs.determine-version.outputs.tag }}
          TAGS: ${{ needs.determine-version.outputs.tag }}
        run: |
          for TAG in ${TAGS}; do
            crane index append \
              -m "${IMAGE_NAME}:${TAG_PREFIX}-amd64" \
              -m "${IMAGE_NAME}:${TAG_PREFIX}-arm64" \
              -t "${IMAGE_NAME}:${TAG}"
          done
